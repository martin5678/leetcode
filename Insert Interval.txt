Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].


-------------------------------

如果newInterval的区间在intervals.get(i) 后面， 结果集插入intervals.get(i)。 如果在前面，如果还没有插入newInterval插入newInterval，然后把已经插入设为true。如果已经插入，插入intervals.get(i). 如果相交就更新newIterval.

注意边缘case， 就是到了最后newInterval还没插入 就要插入。

public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        if (newInterval == null) {
            return intervals;
        }
        if (intervals.size() == 0) {
            intervals.add(newInterval);
            return intervals;
        }
        List<Interval> rs = new ArrayList<Interval>();
        int i = 0;
        boolean inserted = false;
        while (i < intervals.size()) {
            if (intervals.get(i).end < newInterval.start) {
                rs.add(intervals.get(i++));
            } else if (intervals.get(i).start > newInterval.end) {
                if (inserted == false) {
                    rs.add(newInterval); 
                    inserted = true;
                } else {
                    rs.add(intervals.get(i++));
                }
            } else {
                newInterval = mergeTwo(intervals.get(i), newInterval);
                i++;
            }
        }
        if (inserted == false) {
            rs.add(newInterval);
        }
        return rs;
    }

    private Interval mergeTwo(Interval a, Interval b) {
        int big = a.end > b.end ? a.end : b.end;
        int small = a.start < b.start ? a.start : b.start;
        return new Interval(small, big);
    }    
}

==============================

第二次写的 明显第二次写的逻辑好多了。



public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> rs = new ArrayList<Interval>();
        for (int i = 0; i < intervals.size(); i++) {
            if (intervals.get(i).end < newInterval.start
                || intervals.get(i).start > newInterval.end) {
                rs.add(intervals.get(i));    
            } else {
                newInterval = merge(newInterval, intervals.get(i));
            }
        }
        int index = 0;
        while (index < rs.size()) {
            if (rs.get(index).start > newInterval.start) {
                break;
            }
            index++;
        }
        if (index == rs.size()) {
            rs.add(newInterval);
        } else {
            rs.add(index, newInterval);
        }
        return rs;
    }
    
    private Interval merge(Interval a, Interval b) {
        int small = Math.min(a.start, b.start);
        int big = Math.max(a.end, b.end);
        return new Interval(small, big);
    }
}



===============================

又做了一次貌似逻辑这次更加好了
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> rs = new ArrayList<Interval>();
        int pivot = -1;
        for (int i = 0; i < intervals.size(); i++) {
            if (intervals.get(i).start > newInterval.end) {
                rs.add(intervals.get(i));
                if (pivot == -1) {
                    pivot = rs.size() - 1;
                }
            } else if (intervals.get(i).end < newInterval.start) {
                rs.add(intervals.get(i));
            } else {
                newInterval = merge(intervals.get(i), newInterval);
            }
        }
        if (pivot == -1) {
            rs.add(newInterval);
        } else {
            rs.add(pivot, newInterval);
        }
        return rs;
    }
    
    private Interval merge(Interval i1, Interval i2) {
        int start = Math.min(i1.start, i2.start);
        int end = Math.max(i1.end, i2.end);
        return new Interval(start, end);
    }
}
