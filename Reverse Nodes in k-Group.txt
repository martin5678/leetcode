Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

----------------------------------------------


public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (head == null || head.next == null || k <= 1) {
            return head;
        }
        // get the length of the list
        int length = getLength(head);
        if (k > length) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        // pre is used to store the last node of previous group
        ListNode pre = dummy;
        ListNode temppre = null;
        for (int j = 0; j < length / k; j++) {
            ListNode newhead = null;
            for (int i = 0; i < k; i++) {
                // store the last node in reversed K-group which will be the pre node of next group.
                if (i == 0) {
                    temppre = head;
                }
                // reverse
                ListNode temp = head.next;
                head.next = newhead;
                newhead = head;
                head = temp;
                // connect the last node in the previous group to the first node in current group
                // reverse is completed so update pre
                if (i == k - 1) {
                    pre.next = newhead;
                    pre = temppre;
                }
            }
            // after all the reverse is done, connect the last node of reversed part to the left part
            if (j == length / k - 1) {
                pre.next = head;
            }
        }
        return dummy.next;
    }
    
    private int getLength(ListNode head) {
        int length = 0;
        while (head != null) {
            head = head.next;
            length++;
        }
        return length;
    }
}




--------------------------------------------------------------

public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int len = getLen(head);
        if (len < k) {
            return head;
        }
        int time = len / k;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy;
        for (int i = 1; i <= time; i++) {
            ListNode newHead = null;
            ListNode newPre = head;
            for (int j = 1; j <= k; j++) {
                ListNode temp = head.next;
                head.next = newHead;
                newHead = head;
                head = temp;
            }
            pre.next = newHead;
            pre = newPre;
            if (i == time) {
                pre.next = head;
            }
        }
        return dummy.next;
    }
    
    public int getLen(ListNode head) {
        int len = 0;
        while (head != null) {
            head = head.next;
            len++;
        }
        return len;
    }
}
