Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/


------------------------------------------------

先bfs获得所有顶点，然后先克隆顶点再克隆边。 当然还有优化的方法是两个一起克隆这样只需要走一遍。



/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if (node == null) {
            return null;
        }
        List<UndirectedGraphNode> allnodes = new ArrayList<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode, UndirectedGraphNode> relation = 
            new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        // BFS to clone nodes
        allnodes.add(node);
        relation.put(node, new UndirectedGraphNode(node.label));
        int i = 0;
        while (i < allnodes.size()) {
            UndirectedGraphNode temp = allnodes.get(i++);
            for (UndirectedGraphNode t : temp.neighbors) {
                if (!relation.containsKey(t)) {
                    allnodes.add(t);
                    relation.put(t, new UndirectedGraphNode(t.label));    
                }
            }
        }
        // clone edge
        for (UndirectedGraphNode t : allnodes) {
            for (UndirectedGraphNode x : t.neighbors) {
                relation.get(t).neighbors.add(relation.get(x));
            }
        }
        return relation.get(node);
    }
}