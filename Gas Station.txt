There are N gas stations along a circular route, where the amount of gas at station i is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.

Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.

Note:
The solution is guaranteed to be unique.

---------------------------------------------
Another tricky problem. the O(n2) method is easy as below:


public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = gas.length;
        for(int i = 0; i < n; i++) {
            int total = 0;
            int count = 0;
            for(int j = i; count < n; j++) {
                total += gas[j] - cost[j];
                if(total < 0) {
                    break;
                }
                count++;
                if(j == n - 1) {
                    j = 0;
                }
                if(count == n) {
                    return i;
                }
            }
        }
        return -1;
    }
}



The hard part is the O(n) method:

if I start from point A and I can not reach point B means any point between A and B can not reach B. And if the total gas is equal or bigger than cost there must be a solution.

use the index + 1 in the end to ensure the situation that only one station could be solved.

Solution:

public class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int tank = 0;
        int total = 0;
        int index = -1;
        for(int i = 0; i < gas.length; i++) {
            tank += gas[i] - cost[i];
            total += gas[i] - cost[i];
            if(tank < 0) {
                index = i;
                tank = 0;
            }
        }
        return total >= 0 ? index + 1 : -1;
    }
}



