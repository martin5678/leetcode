Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

------------------------------------------

My solution: It takes two recursions. 



public class Solution {
    public boolean isBalanced(TreeNode root) {
        if (root == null) {
            return true;
        }
        int left = getHeight(root.left);
        int right = getHeight(root.right);
        if (Math.abs(left - right) > 1) {
            return false;
        }
        return isBalanced(root.left) && isBalanced(root.right);
    }
    
    private int getHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        return Math.max(getHeight(root.right), getHeight(root.left)) + 1;
    }
}



Another solution only takes one recursion: 


public class Solution {
public boolean isBalanced=true;

public boolean isBalanced(TreeNode root) {
    maxDepth(root);
    return isBalanced;
}

public int maxDepth(TreeNode root) {
   if(root==null)
     return 0;
   else{
       int leftDepth=maxDepth(root.left)+1;
       int rightDepth=maxDepth(root.right)+1;
       if(Math.abs(leftDepth-rightDepth)>1)
            isBalanced=false;
       return leftDepth>rightDepth?(leftDepth):(rightDepth);
   }
}
}

