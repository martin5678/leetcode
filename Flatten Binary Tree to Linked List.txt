Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
click to show hints.

Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.

---------------------------------------------

Notice: set the left pointer to null.

public class Solution {
    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        preOrder(root, q);
        while (q.size() > 0) {
            q.peek().left = null;
            q.poll().right = q.peek();
        }
    }
    
    public void preOrder(TreeNode root, Queue q) {
        if (root != null) {
            q.offer(root);
            preOrder(root.left, q);
            preOrder(root.right, q);
        }
    }
}





Without Queue version.

public class Solution {
    private TreeNode lastNode = null;

    public void flatten(TreeNode root) {
        if (root == null) {
            return;
        }

        if (lastNode != null) {
            lastNode.left = null;
            lastNode.right = root;
        }

        lastNode = root;
        TreeNode right = root.right;
        flatten(root.left);
        flatten(right);
    }
}