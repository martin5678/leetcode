Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

-----------------------------------------

这个解法里面的stack，不是用来存左右括号的。是来存左括号的index。本来么，右括号也不用存。遍历S。遇到'('，放入stack。如果遇到')'，如果stack是空，说明这是一个无法匹配的')'，记录下last。last里面存放的其实是最后一个无法匹配的')'。为啥要保存这个值呢？主要是为了计算后面完整的表达式的长度。可以这样理解： “所有无法匹配的')'”的index其实都是各个group的分界点。

public class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> st = new Stack<Integer>();
        int result = 0;
        int last = -1;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                st.push(i);
            } else {
                if (st.empty()) {
                    last = i;
                } else {
                    st.pop();
                    if (st.empty()) {
                        result = Math.max(result, i - last);   
                    } else {
                        result = Math.max(result, i - st.peek());
                    }
                }
            }
        }
        return result;
    }
}