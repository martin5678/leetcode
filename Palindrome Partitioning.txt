Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]



--------------------------------

又是一个以subsets为模板的题目，区别就是写一个判断函数判断子字符串是不是回文。

public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> rs = new ArrayList<List<String>>();
        if (s.length() == 0 || s == null) {
            return rs;
        }
        ArrayList<String> temp = new ArrayList<String>();
        helper(rs, temp, 0, s);
        return rs;
    }
    
    private void helper(List<List<String>> rs, ArrayList<String> temp, 
        int pos, String s) {
        if (pos == s.length()) {
            rs.add(new ArrayList<String>(temp));
            return;
        }
        for (int i = pos; i < s.length(); i++) {
            String t = s.substring(pos, i + 1);
            if (!isPalindrome(t)) {
                continue;
            }
            temp.add(t);
            helper(rs, temp, i + 1, s);
            temp.remove(temp.size() - 1);
        }
    }
    
    private boolean isPalindrome(String s) {
        int i = 0;
        int n = s.length() - 1;
        while (i < n) {
            if (s.charAt(i) != s.charAt(n)) {
                return false;
            }
            i++;
            n--;
        }
        return true;
    }
}