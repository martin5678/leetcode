Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".


---------------------------------------

一个DP问题。定义possible[i] 为S字符串上[0,i]的子串是否可以被segmented by dictionary.

那么

possible[i] = true      if  S[0,i]在dictionary里面

                = true      if   possible[k] == true 并且 S[k+1,j]在dictionary里面， 0<k<i

               = false      if    no such k exist.

 
注意在第一个循环时要判断从0 - i 是不是直接在字典里。 我第二次写的程序明显比第一次优化，因为直接减掉了不必要的枝。


public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        if (dict.isEmpty()) {
            return false;
        }
        if (s.length() == 0) {
            return false;
        }
        boolean[] dp = new boolean[s.length()];
        dp[0] = dict.contains(s.substring(0, 1));
        for (int i = 0; i < s.length(); i++) {
            String sub = s.substring(0, i + 1);
            if (dict.contains(sub)) {
                dp[i] = true;
            }
            for (int j = 0; j < i; j++) {
                String str = s.substring(j + 1, i + 1);
                if (dp[j] == true && dict.contains(str)) {
                    dp[i] = true;
                }
            }
        }
        return dp[s.length() - 1];
    }
}


----------------------------

public class Solution {
    public boolean wordBreak(String s, Set<String> dict) {
        if (s.length() == 0 || dict.size() == 0) {
            return false;
        }
        boolean[] dp = new boolean[s.length()];
        dp[0] = dict.contains(s.substring(0, 1));
        for (int i = 1; i < s.length(); i++) {
            if (dict.contains(s.substring(0, i + 1))) {
                dp[i] = true;
                continue;
            }
            for (int j = i - 1; j >= 0; j--) {
                if (dp[j] == true) {
                    if (dict.contains(s.substring(j + 1, i + 1))) {
                        dp[i] = true;
                        break;
                    }
                }
            }
        }
        return dp[s.length() - 1];
    }
}


--------------------------------

public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i < dp.length; i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] == true) {
                    if (wordDict.contains(s.substring(j, i))) {
                        dp[i] = true;
                        break;
                    }
                }
            }
        }
        return dp[dp.length - 1];
    }
}
