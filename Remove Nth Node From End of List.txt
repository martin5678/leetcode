Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

--------------------------------------

先去设一个跑n次，然后第二个指针从头开始和第一个一起跑，第一个跑到尾，第二个就指向了要删除的节点。

注意corner case就是删除的是第一个节点。


public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode cur = head;
        ListNode pos = head;
        for (int i = 0; i < n; i++) {
            cur = cur.next;
        }
        ListNode pre = null;
        while (cur != null) {
            cur= cur.next;
            pre = pos;
            pos = pos.next;
        }
        if (pre == null) {
            return head.next;
        }
        pre.next = pos.next;
        return head;
    }
}




public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode index = head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        for (int i = 0; i < n; i++) {
            index = index.next;
        }
        ListNode pre = dummy;
        ListNode cur = head;
        while (index != null) {
            index = index.next;
            cur = cur.next;
            pre = pre.next;
        }
        pre.next = cur.next;
        return dummy.next;
    }
}

