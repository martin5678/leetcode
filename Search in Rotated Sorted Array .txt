Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.


---------------------------------------

My solution: find the pivot point(the minimal number)

public class Solution {
    public int search(int[] A, int target) {
        int start, end;
        int pivot = findPivot(A);
        if (target > A[A.length - 1]) {
            start = 0;
            end = pivot - 1;
        } else {
            start = pivot;
            end = A.length - 1;
        }
        while (start <= end) {
            int mid = (start + end) / 2;
            if (A[mid] < target) {
                start = mid + 1;
            } else if (A[mid] > target) {
                end = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
    
    public int findPivot(int[] A) {
    	int start = 0;
    	int end = A.length - 1;
    	if (A[end] >= A[start]) {
    	    return 0;//in case the array is not rotated.
    	}
    	while (start <= end) {
    		int mid = (start + end) / 2;
    		if (A[mid] > A[start]) {
    			start = mid ;
    		} else if (A[mid] < A[start]){
    			end = mid;
    		} else {
    			return end;
    		}
    	}
    	return end ;
    }
}



--------------------------------------------


solution 2:

public class Solution {
    public int search(int[] A, int target) {
        int start = 0; 
        int end = A.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (A[mid] == target) {
                return mid;
            }
            if (A[mid] < A[start]) {
                if (target > A[mid] && target <= A[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            } else {
                if (target < A[mid] && target >= A[start]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
        }
        return -1;
    }
}

