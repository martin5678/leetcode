Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, ¡­ , ak) must be in non-descending order. (ie, a1 ¡Ü a2 ¡Ü ¡­ ¡Ü ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 

-------------------------------------

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        if (candidates == null) {
            return rs;
        }
        ArrayList<Integer> temp = new ArrayList<Integer>();
        Arrays.sort(candidates);
        helper(rs, temp, 0, candidates, target);
        return rs;
    }
    
    public void helper(List<List<Integer>> rs, ArrayList<Integer> temp,
        int pos, int[] candidates, int target) {
        if (target == 0) {
            rs.add(new ArrayList<Integer>(temp));
            return;
        }
        for(int i = pos; i < candidates.length; i++) {
            if (candidates[i] > target) {
                break;
            }
            temp.add(candidates[i]);
            helper(rs, temp, i, candidates, target - candidates[i]);
            temp.remove(temp.size() - 1);
        }
    }
}


---------------------------------------

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        if (candidates.length == 0 || candidates == null) {
            return rs;
        }
        Arrays.sort(candidates);
        ArrayList<Integer> temp = new ArrayList<Integer>();
        helper(rs, candidates, target, temp, 0, 0);
        return rs;
    }
    
    public void helper(List<List<Integer>> rs, int[] candidates, 
        int target, ArrayList<Integer> temp, int sum, int pos) {
        if (sum == target) {
            rs.add(new ArrayList<Integer>(temp));
            return;
        }
        if (sum > target) {
            return;
        }
        for (int i = pos; i < candidates.length; i++) {
            sum += candidates[i];
            temp.add(candidates[i]);
            helper(rs, candidates, target, temp, sum, i);
            sum -= candidates[i];
            temp.remove(temp.size() - 1);
        }
    }
}