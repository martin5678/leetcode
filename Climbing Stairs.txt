You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

#################################################################################################

Solution1: DP O(n) time  O(n) space

res[n]=res[n-1]+res[n-2]
res[0]=0
res[1]=1

public class Solution {
    
	public int climbStairs(int n) {
  
		int res[] = new int[n + 1];
        
	        res[0] = 1;
        
	        res[1] = 1;
        
		for(int i = 2; i < n + 1; i++){

	            res[i] = res[i - 1] + res[i - 2];
        
		}
	
        return res[n];
    
	}

}



Solution2: Math O(n) time  O(1) space

This is typical fibonacci array.


public class Solution {
    public int climbStairs(int n) {
        return fib(n);
    }
    public int fib(int n){
        int res = 0;
        int pre = 1;
        int ppre = 1;
        if(n == 0 || n == 1) return 1;
        for(int i = 2; i < n + 1; i++){
            res = pre + ppre;
            ppre = pre;
            pre = res;
        }
        return res;
    }
}


