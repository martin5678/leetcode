Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0


------------------------------------------

Solution:

public class Solution {
    public int searchInsert(int[] A, int target) {
        int high = A.length - 1;
        int low = 0;
        int index = 0;
        while(low <= high) {
            int mid = (low + high) / 2;
            index = mid;
            if(A[mid] == target) {
                return mid;
            } else if(A[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        if(target > A[index]) return index + 1;
        else return index;   
    }
}


------------------------------------------
其实分析了各种情况之后 如果需要插入， 位置肯定在end+1

public class Solution {
    public int searchInsert(int[] A, int target) {
        if (A.length == 0 || A == null) {
            return 1;
        }
        int start = 0;
        int end = A.length - 1;
        int mid;
        while (start <= end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                return mid;
            } else if (A[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return end + 1;
    }
}

