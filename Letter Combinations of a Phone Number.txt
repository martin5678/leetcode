Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.



Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.


---------------------------
Typical DFS

public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> rs = new ArrayList<String>();
        if (digits == null) {
            return rs;
        }
        HashMap<Character, char[]> map = new HashMap<Character, char[]>();
        map.put('0', new char[] {});
        map.put('1', new char[] {});
        map.put('2', new char[] { 'a', 'b', 'c' });
        map.put('3', new char[] { 'd', 'e', 'f' });
        map.put('4', new char[] { 'g', 'h', 'i' });
        map.put('5', new char[] { 'j', 'k', 'l' });
        map.put('6', new char[] { 'm', 'n', 'o' });
        map.put('7', new char[] { 'p', 'q', 'r', 's' });
        map.put('8', new char[] { 't', 'u', 'v'});
        map.put('9', new char[] { 'w', 'x', 'y', 'z' });
        StringBuilder sb = new StringBuilder();
        helper(digits, sb, rs, map);
        return rs;
    }
    
    public void helper(String digits, StringBuilder sb,
        List<String> rs, HashMap<Character, char[]> map) {
        if (sb.length() == digits.length()) {
            rs.add(sb.toString());
            return;
        }
        for (char i : map.get(digits.charAt(sb.length()))) {
            sb.append(i);
            helper(digits, sb, rs, map);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}




-=================================================



public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> rs = new ArrayList<String>();
        HashMap<Integer, char[]> hm = new HashMap<Integer, char[]>();
        ArrayList<Character> temp = new ArrayList<Character>();
        hm.put(0, new char[] {});
        hm.put(1, new char[] {});
        hm.put(2, new char[] {'a', 'b', 'c'});
        hm.put(3, new char[] {'d', 'e', 'f'});
        hm.put(4, new char[] {'g', 'h', 'i'});
        hm.put(5, new char[] {'j', 'k', 'l'});
        hm.put(6, new char[] {'m', 'n', 'o'});
        hm.put(7, new char[] {'p', 'q', 'r', 's'});
        hm.put(8, new char[] {'t', 'u', 'v'});
        hm.put(9, new char[] {'w', 'x', 'y', 'z'});
        helper(digits, rs, 0, hm, temp);
        return rs;
    }
    
    private void helper(String digits, List<String> rs, int pos,
        HashMap<Integer, char[]> hm, ArrayList<Character> temp) {
        if (temp.size() == digits.length()) {
            StringBuilder sb = new StringBuilder();
            for (char i : temp) {
                sb.append(i);
            }
            rs.add(sb.toString());
            return;
        }
        for (int i = pos; i < digits.length(); i++) {
            int t = digits.charAt(i) - '0'; 
            for (char a : hm.get(t)) {
                temp.add(a);
                helper(digits, rs, i + 1, hm, temp);
                temp.remove(temp.size() - 1);
            }
        }
    }
}