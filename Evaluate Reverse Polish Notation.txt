Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

-------------------------------------------------


public class Solution {
    public int evalRPN(String[] tokens) {
        if (tokens.length == 0) {
            return 0;
        }
        Stack<String> st = new Stack<String>();
        int i = 0;
        while (i < tokens.length) {
            if (!isOp(tokens[i])) {
                st.push(tokens[i++]);
            } else {
                int b = Integer.parseInt(st.pop());
                int a = Integer.parseInt(st.pop());
                int result = calculate(a, b, tokens[i]);
                String r = Integer.toString(result);
                st.push(r);
                i++;
            }
        }
        return Integer.parseInt(st.pop());
    }
    
    private int calculate(int a, int b, String op) {
        if (op.equals("+")) {
            return a + b;
        } else if (op.equals("-")) {
            return a - b;
        } else if (op.equals("*")) {
            return a * b;
        } else {
            return a / b;
        }
    }
    
    private boolean isOp(String s) {
        return s.equals("+") || s.equals("-") 
        || s.equals("*") || s.equals("/");
    }
}