Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.



=================================


public class Codec {
    private static final String spliter = ",";
    private static final String nulPointer = "#";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        return sb.toString();
    }
    
    public void serializeHelper(TreeNode root, StringBuilder sb) {
        if (root == null) {
            sb.append(nulPointer).append(spliter);
            return;
        }
        sb.append(root.val).append(spliter);
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] nodes = data.split(spliter);
        Queue<String> encoding = new LinkedList<>();
        encoding.addAll(Arrays.asList(nodes));
        return deserializeHelper(encoding);
    }
    
    public TreeNode deserializeHelper(Queue<String> encoding) {
        String val = encoding.poll();
        if (val.equals(nulPointer)) {
            return null;
        } else {
            TreeNode node = new TreeNode(Integer.valueOf(val));
            node.left = deserializeHelper(encoding);
            node.right = deserializeHelper(encoding);
            return node;
        }
    }
    
    
}
