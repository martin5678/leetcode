Given a collection of integers that might contain duplicates, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]



------------------------------------


public class Solution {
    public List<List<Integer>> subsetsWithDup(int[] num) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        if(num == null || num.length == 0) {
            return rs;
        }
        ArrayList<Integer> temp = new ArrayList<Integer>();
        Arrays.sort(num);
        helper(rs, temp, num, 0);
        return rs;
    }
    
    public void helper(List<List<Integer>> rs, ArrayList<Integer> temp,
        int[] num, int pos) {
        rs.add(new ArrayList<Integer>(temp));
        for (int i = pos; i < num.length; i++) {
            if (i != pos && num[i] == num[i - 1]) {
                continue;
            }
            temp.add(num[i]);
            helper(rs, temp, num, i + 1);
            temp.remove(temp.size() - 1);
        }
    }
}