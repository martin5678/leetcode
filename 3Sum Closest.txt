Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

------------------------------------------------

跟3Sum 算法一样 只是不需要去重了（当然去重的话效率更高）。 


public class Solution {
    public int threeSumClosest(int[] num, int target) {
        Arrays.sort(num);
        int sum = num[0] + num[1] + num[2];
        int diff = Math.abs(sum - target);
        for (int i = 0; i < num.length - 2; i++) {
            int left = i + 1;
            int right = num.length - 1;
            while (left < right) {
                int temp = num[i] + num[left] + num[right];
                int tdiff = Math.abs(temp - target);
                if (tdiff == 0) {
                    return temp;
                }
                if (temp < target) {
                    left++;
                    if (tdiff < diff) {
                        diff = tdiff;
                        sum = temp;
                    }
                } else {
                    right--;
                    if (tdiff < diff) {
                        diff = tdiff;
                        sum = temp;
                    }
                }
            }
        }
        return sum;
    }
}