Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.


==================================================

class TrieNode {
    // Initialize your data structure here.
    char val;
    HashMap<Character, TrieNode> children;
    boolean isLeaf;
    
    public TrieNode(char val) {
        this.val = val;
        this.children = new HashMap<>();
        this.isLeaf = false;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode('a');
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode head = root;
        for (int i = 0; i < word.length(); i++) {
            char cur = word.charAt(i);
            if (!head.children.containsKey(cur)) {
                head.children.put(cur, new TrieNode(cur));
            }
            if (i == word.length() - 1) {
                head.children.get(cur).isLeaf = true;
            }
            head = head.children.get(cur);
        }
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode head = root;
        for (int i = 0; i < word.length(); i++) {
            char cur = word.charAt(i);
            if (!head.children.containsKey(cur)) {
                return false;
            }
            if (i == word.length() - 1) {
                return head.children.get(cur).isLeaf;
            }
            head = head.children.get(cur);
        }
        return false;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode head = root;
        for (int i = 0; i < prefix.length(); i++) {
            char cur = prefix.charAt(i);
            if (!head.children.containsKey(cur)) {
                return false;
            }
            head = head.children.get(cur);
        }
        return true;
    }
}



