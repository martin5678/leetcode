Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

-------------------------------------------
Solution : Non recursion.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null || l2 == null) {
            return l1 == null ? l2 : l1;
        }
        ListNode l = new ListNode(0);
        ListNode head = l;
        while(l1 != null && l2 != null) {
            if(l1.val > l2.val) {
                head.next = l2;
                l2 = l2.next;
            } else {
                head.next = l1;
                l1 = l1.next;
            }
            head = head.next;
        }
        head.next = l1 == null ? l2 : l1;
        return l.next;
    }
}




Solution : Recursion


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {  
            return l2;  
        }  
        if (l2 == null) {  
            return l1;  
        }  
  
        ListNode mergeHead = null;  
        if (l1.val < l2.val) {  
            mergeHead = l1; 
            l1 = l1.next;
            mergeHead.next = mergeTwoLists(l1, l2);  
        } else {  
            mergeHead = l2;  
            l2 = l2.next;
            mergeHead.next = mergeTwoLists(l1, l2);  
        }  
        return mergeHead;  
    }
}