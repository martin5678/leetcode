Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

----------------------------------
Note: Three ways: 2 queues, dummy node with 1 queue and just 1 queue. 

Notice : size keep changing so we need to store the orignal size in the for loop.

public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        if (root == null) {
            return rs;
        }
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        while (!q.isEmpty()) {
            ArrayList<Integer> temp = new ArrayList<Integer>();
            int size = q.size(); // size keep changing so we need to store the orignal size
            for (int i = 0; i < size; i++) {
                TreeNode head = q.poll();
                temp.add(head.val);
                if (head.left != null) {
                    q.offer(head.left);
                }
                if (head.right != null) {
                    q.offer(head.right);
                }
            }
            rs.add(temp);
        }
        return rs;
    }
}