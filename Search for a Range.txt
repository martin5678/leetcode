Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].


--------------------------------------------

public class Solution {
    public int[] searchRange(int[] A, int target) {
        int[] rs = 
            {
               searchHead(A, target),
               searchTail(A, target)
            };
        return rs;
    }
    
    public int searchTail(int[] A, int target) {
        int start = 0;
        int end = A.length - 1;
        int mid;
        while (start <= end) {
            mid = (start + end) / 2;
            if (target < A[mid]) {
                end = mid - 1;
            } else if(target > A[mid]) {
                start = mid + 1;
            } else {
                start = mid + 1;
                while (start <= end) {
                    mid = (start + end) / 2;
                    if (A[mid] == target) {
                        start = mid + 1;
                    } else {
                        end = mid - 1;
                    }
                }
                return end;
            }
        }
        return -1;
    }
    
    public int searchHead(int[] A, int target) {
        int start = 0;
        int end = A.length - 1;
        int mid;
        while (start <= end) {
            mid = (start + end) / 2;
            if (target < A[mid]) {
                end = mid - 1;
            } else if(target > A[mid]) {
                start = mid + 1;
            } else {
                end = mid - 1;
                while (start <= end) {
                    mid = (start + end) / 2;
                    if (A[mid] == target) {
                        end = mid - 1;
                    } else {
                        start = mid + 1;
                    }
                }
                return start;
            }
        }
        return -1;
    }
}




public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        int[] rs = {-1, -1};
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        if (nums[start] != target) {
            return rs;
        }
        rs[0] = start;
        end = nums.length - 1;
        while (start < end) {
            int mid = start + (end - start) / 2 + 1;
            if (nums[mid] > target) {
                end = mid - 1;
            } else {
                start = mid;
            }
        }
        rs[1] = end;
        return rs;
    }
}
