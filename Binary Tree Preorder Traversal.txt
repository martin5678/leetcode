Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?

----------------------------------------------

Solution: recursion

public class Solution {
    private ArrayList<Integer> rs = new ArrayList<Integer>();
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        if(root != null) {
            rs.add(root.val);
            preorderTraversal(root.left);
            preorderTraversal(root.right);
        }
        return rs;
    }
}


Solution: Non recursion;

public class Solution {
    public ArrayList<Integer> preorderTraversal(TreeNode root) {
        ArrayList<Integer> rs = new ArrayList<Integer>();
        Stack<TreeNode> st = new Stack<TreeNode>();
        TreeNode p = root;
        while(p != null || st.size() > 0) {
            while(p != null) {
                rs.add(p.val);
                st.push(p);
                p = p.left;
            }
            if(st.size() > 0) {
                p = st.pop();
                p = p.right;
            }
        }
        return rs;
    }
}