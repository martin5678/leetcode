Given a non-negative number represented as an array of digits, plus one to the number.

The digits are stored such that the most significant digit is at the head of the list.


--------------------------------------------

solution one month ago:

public class Solution {
    public int[] plusOne(int[] digits) {
        int n=digits.length;
        if(digits[n-1]!=9){
            digits[n-1]++;
            return digits;
        }
        else{
            int x=n-1;
            while(x>0&&digits[x]==9){
                digits[x--]=0;
            }
            if(x==0&&digits[x]==9){
                int[] b=new int[n+1];
                b[0]=1;
                for(int i=1;i<n+1;i++){
                    b[i]=0;
                }
                return b;
            }
            else {
                digits[x]++;
                return digits;
        }
    }
}
}


solution now:

public class Solution {
    public int[] plusOne(int[] digits) {
        int jump = 0;
        int n = digits.length;
        digits[n-1] = (digits[n-1] + 1) % 10;
        if(digits[n-1] == 0) {
            jump = 1;
        }
        int i = n - 2;
        while(jump != 0 && i >= 0) {
            digits[i] = (digits[i] + jump) % 10;
            if(digits[i] != 0) {
                jump = 0;
            }
            i--;
        }
        if(jump == 0) {
            return digits;
        } else{
            int[] t = new int[n+1];
            t[0] = 1;
            for(int j = 1; j < n + 1; j++){
                t[j] = 0;
            }
            return t;
        }
    }
}


-----------------------------------

以上全是以前写的全是shit。。。


public class Solution {
    public int[] plusOne(int[] digits) {
        StringBuilder sb = new StringBuilder();
        int sum = (digits[digits.length - 1] + 1) % 10;
        int carry = (digits[digits.length - 1] + 1) / 10;
        sb.append(sum);
        for (int i = digits.length - 2; i >= 0; i--) {
            sum = (digits[i] + carry) % 10;
            carry = (digits[i] + carry) / 10;
            sb.insert(0, sum);
        }
        if (carry == 1) {
            sb.insert(0, 1);
        }
        int[] result = new int[sb.length()];
        for (int i = 0; i < result.length; i++) {
            result[i] = sb.charAt(i) - '0';
        }
        return result;
    }
}




