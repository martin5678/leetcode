You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


----------------------------------------------------

Node: simple linkedlist operation, just need to simplify the code.

solution1:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null && l2 == null) return null;
        else if(l1 == null || l2 == null) return l1 == null ? l2 : l1;
        int ten = 0;
        ListNode head = new ListNode(0);
        ListNode l3 = head;
        while(l1 != null && l2 != null){
            ListNode temp = new ListNode(0);
            temp.val = (l1.val + l2.val + ten) % 10;
            l3.next = temp;
            if((l1.val + l2.val + ten) >= 10){
                ten = 1;
            } else ten = 0;
            l3 = l3.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        if(l1 != null){
            if(ten == 0){
                l3.next = l1;
            }else{
                while(l1 != null){
                    ListNode temp = new ListNode(0);
                    temp.val = (l1.val + ten) % 10;
                    l3.next = temp;
                    if((l1.val + ten) >= 10){
                        ten = 1;
                    }else ten = 0;

                    l3 = l3.next;
                    l1 = l1.next;
                }
            }
        }
        else if(l2 != null){
            if(ten == 0){
                l3.next = l2;
            }else{
                while(l2 != null){
                    ListNode temp = new ListNode(0);
                    temp.val = (l2.val + ten) % 10;
                    l3.next = temp;
                    if((l2.val + ten) >= 10){
                        ten = 1;
                    }else ten = 0;
                    l3 = l3.next;
                    l2 = l2.next;
                }
            }
        } 
        if(ten == 1) l3.next = new ListNode(1);
        return head.next;
    }
}




Solution2 : from lettcode user: potpie. this code is fantastic, beautiful and simple.



public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);
        ListNode d = sentinel;
        int sum = 0;
        while (c1 != null || c2 != null) {
            sum /= 10;
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);
            d = d.next;
        }
        if (sum / 10 == 1)
            d.next = new ListNode(1);
        return sentinel.next;
    }
}
