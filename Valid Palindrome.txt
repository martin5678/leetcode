Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

For example,
"A man, a plan, a canal: Panama" is a palindrome.
"race a car" is not a palindrome.

Note:
Have you consider that the string might be empty? This is a good question to ask during an interview.

For the purpose of this problem, we define empty string as valid palindrome.


---------------------------------------------

solution:
public class Solution {
    public boolean isPalindrome(String s) {
        String s1 = s.toLowerCase();
        int n = s1.length();
        if(n == 0) return true;
        int i = 0, j = n-1;
        while(j >= i){
            if(!isValid(s1.charAt(i)) && !isValid(s1.charAt(j))){
                i++;
                j--;
            }else if(!isValid(s1.charAt(i)) && isValid(s1.charAt(j))){
                i++;
            }else if(isValid(s1.charAt(i)) && !isValid(s1.charAt(j))){
                j--;
            }else{
                if(s1.charAt(i) == s1.charAt(j)){
                    i++;
                    j--;
                }
                else return false;
            }
        }
        return true;
    }
    
    public boolean isValid(char a){
        return (a >= '0' && a <= '9') || (a >= 'a' && a <= 'z');
    }
}






---------------------------------

public class Solution {
    public boolean isPalindrome(String s) {
        StringBuilder sb = new StringBuilder();
        int index = 0;
        // to lower case
        for (index = 0; index < s.length(); index++) {
            if (isValid(s.charAt(index))) {
                if (isUpper(s.charAt(index))) {
                    sb.append(toLower(s.charAt(index)));
                    continue;
                }
                sb.append(s.charAt(index));
            }
        }
        String temp = sb.toString();
        // check palindrome
        int first = 0;
        int last = temp.length() - 1;
        while (first <= last) {
            if (temp.charAt(first) != temp.charAt(last)) {
                return false;
            }
            first++;
            last--;
        }
        return true;
    }
    
    private boolean isValid(char c) {
        return (c >= 'a' && c <= 'z') 
            || (c >= '0' && c <= '9')
            || (c >= 'A' && c <= 'Z');
    }
    
    private boolean isUpper(char c) {
        return c >= 'A' && c <= 'Z';
    }
    
    private char toLower(char c) {
        int diff = 'a' - 'A';
        c = (char) (c + diff);
        return c;
    }
}




=======================================

public class Solution {
    public boolean isPalindrome(String s) {
        if (s.length() == 0) {
            return true;
        }
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            while (!isChar(s.charAt(left)) && left < right) {
                left++;
            }
            while (!isChar(s.charAt(right)) && left < right) {
                right--;
            }
            if (!isEqual(s.charAt(left++), s.charAt(right--))) {
                return false;
            }
        }
        return true;
    }
    
    public boolean isEqual(char c1, char c2) {
        int dis = Math.abs('A' - 'a');
        return c1 == c2 || Math.abs(c1 - c2) == dis;
    }
    
    public boolean isChar(char c) {
        return c >= '0' && c <= '9'
            || c >= 'a' && c <= 'z'
            || c >= 'A' && c <= 'Z';
    }
}
