Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.

If the last word does not exist, return 0.

Note: A word is defined as a character sequence consists of non-space characters only.

For example, 
Given s = "Hello World",
return 5.


-----------------------------------------------------------

The solution I have one month ago:

public class Solution {
    public int lengthOfLastWord(String s) {
        if(s.trim().length()==0) return 0;
        int n=s.length();
        char[] b=new char[n];
        b=s.toCharArray();
        int indexspace=0;
        int indexchar=0;
        for(int i=0;i<n;i++){
            if(b[i]==32) indexspace=i;
            else indexchar=i;
        }
        if(indexspace==0) return s.trim().length();
        if(indexspace==n-1){
            int count=0;
            while(indexchar>=0&&b[indexchar]!=32){
                count++;
                indexchar--;
            }
            return count;
        }
        else return n-indexspace-1;
    }
}



The solution I redo this problem now: 

The improvement is quite remarkable. Find the index of last character, and from that index find the length.


public class Solution {
    public int lengthOfLastWord(String s) {
        if(s.trim().length() == 0) return 0;
        int index = 0;
        int len = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) != ' '){
                index = i;
            }
        }
        while(index >= 0 && s.charAt(index) != ' '){
            index--;
            len++;
        }
        return len;
    }
}


------------------------------------------


重写了trim()方法


public class Solution {
    public int lengthOfLastWord(String s) {
        // remove the trailing and leading spaces
        int tail = s.length() - 1;
        int head = 0;
        while (tail > head && tail >= 0 && head < s.length()) {
            if (s.charAt(tail) == ' ') {
                tail--;
            } 
            if (s.charAt(head) == ' ') {
                head++;
            }
            if (tail >= 0 && head < s.length() && 
                s.charAt(head) != ' ' && s.charAt(tail) != ' ') {
                break;
            }
        }
        if (tail == head && s.charAt(tail) == ' ') {
            tail--;
        }
        String sub = s.substring(head, tail + 1);
        if (sub.length() == 0) {
            return 0;
        }
        tail = sub.length() - 1;
        while (tail >= 0) {
            if (sub.charAt(tail) != ' ') {
                tail--;
            } else {
                break;
            }
        }
        return sub.length() - 1 - tail;
    }
}