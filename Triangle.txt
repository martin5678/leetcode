Triangle Total Accepted: 11168 Total Submissions: 42051 My Submissions
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.


--------------------------------------------------

Note: Use dfs will cost O(2n) altohugh the space complexity is O(n). But DP can solve this problem well with O(n) space and O(n2) time.

minpath[k][i] = min( minpath[k+1][i], minpath[k+1][i+1]) + triangle[k][i];

and better is 

For the kth level:
minpath[i] = min( minpath[i], minpath[i+1]) + triangle[k][i]; 


Solution:


public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[] min = new int[n];
        for (int i = 0; i < n; i++) {
            min[i] = triangle.get(n - 1).get(i);
        }
        for (int j = n -2; j >= 0; j--) {
            for (int i = 0; i < j + 1; i++ ) {
                min[i] = Math.min(min[i], min[i + 1]) + triangle.get(j).get(i);
            }
        }
        return min[0];
    }
}