Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X


----------------------

bfs 或者 dfs都可以有O（n^2）的解但是dfs需要剪枝麻烦点，所有用bfs比较好。 如果一个点O不被X包围意味着这个点在四边上或者这个与四边上某个O点连通。



public class Solution {
    public void solve(char[][] board) {
        if (board.length == 0) {
            return;
        }
        int row = board.length;
        int col = board[0].length;
        Queue<Integer> xindex = new LinkedList<Integer>();
        Queue<Integer> yindex = new LinkedList<Integer>();
        // Initialize top and bottom
        for (int i = 0; i < row; i++) {
            if (board[i][0] == 'O') {
                xindex.offer(i);
                yindex.offer(0);
            }
            if (board[i][col - 1] == 'O') {
                xindex.offer(i);
                yindex.offer(col - 1);
            }
        }
        // Initialize left and right
        for (int i = 1; i < col - 1; i++) {
            if (board[0][i] == 'O') {
                xindex.offer(0);
                yindex.offer(i);
            }
            if (board[row - 1][i] == 'O') {
                xindex.offer(row - 1);
                yindex.offer(i);
            }
        }
        //BFS
        while (xindex.size() > 0) {
            int x = xindex.poll();
            int y = yindex.poll();
            board[x][y] = '#';
            // go left
            if (x - 1 >= 0 && board[x - 1][y] == 'O') {
                xindex.offer(x - 1);
                yindex.offer(y);
            }
            // go right
            if (x + 1 < row && board[x + 1][y] == 'O') {
                xindex.offer(x + 1);
                yindex.offer(y);
            }
            // go up
            if (y + 1 < col && board[x][y + 1] == 'O') {
                xindex.offer(x);
                yindex.offer(y + 1);
            }
            // go down
            if (y - 1 >= 0 && board[x][y - 1] == 'O') {
                xindex.offer(x);
                yindex.offer(y - 1);
            }
        }
        // print
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }
}