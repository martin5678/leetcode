Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.


----------------------------------


实质上就是在 找到从后往前数k % n的位置的节点，然后旋转。 找从后往前的题目的算法已经有了。找到之后把这个节点之前的那个节点断开，然后把尾巴连到原来的头上。




public class Solution {
    public ListNode rotateRight(ListNode head, int n) {
        if (head == null || head.next == null) {
            return head;
        }
        int length = getLength(head);
        int step = n % length;
        if (step == 0) {
            return head;
        }
        // find the rotate start node
        ListNode cur = head;
        ListNode pos = head;
        for (int i = 1; i <= step; i++) {
            cur = cur.next;
        }
        ListNode pre = null;
        while (cur != null) {
            cur = cur.next;
            pre = pos;
            pos = pos.next;
        }
        // pos is the rotate start node and pre is the node before it.
        pre.next = null;
        ListNode newHead = pos;
        while (pos.next != null) {
            pos = pos.next;
        }
        pos.next = head;
        return newHead;
    }
    
    private int getLength(ListNode head) {
        int length = 0;
        while (head != null) {
            head = head.next;
            length++;
        }
        return length;
    }
}