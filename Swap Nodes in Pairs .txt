Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.


---------------------------------

Solution: recursion(it violates the the constant space. )


public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null) {
            return null;
        }
        if(head.next == null) {
            return head;
        }
        ListNode third = head.next.next;
        ListNode second = head.next;
        second.next = head;
        head.next = swapPairs(third);
        return second;
    }
}


Solution: Non recurision

public class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy;
        while (head != null && head.next != null) {
            ListNode third = head.next.next;
            ListNode second = head.next;
            second.next = head;
            head.next = third;
            pre.next = second;
            pre = head;
            head = third;
        }
        return dummy.next;
    }
}