Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

For example:
Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

------------------------------

DP, this one gets TLE, but I can do some modification.

贪心法可以只用O（n）就解出来， 计算每走一步能打到的最远距离 什么时候最远距离超过或者等于last就返回当时的步数。


public class Solution {
    public int jump(int[] A) {
        if (A.length == 0 || A.length == 1) {
            return 0;
        }
        int n = A.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (A[j] >= (i - j)) {
                    dp[i] = dp[i] < dp[j] + 1 ? dp[i] : dp[j] + 1;
                }
            }
        }
        return dp[n - 1];
    }
}



After

public class Solution {
    public int jump(int[] A) {
        int[] steps = new int[A.length];        
        steps[0] = 0;
        for (int i = 1; i < A.length; i++) {
            steps[i] = Integer.MAX_VALUE;
            for (int j = 0; j < i; j++) {
                if (steps[j] != Integer.MAX_VALUE && j + A[j] >= i) {
                    steps[i] = steps[j] + 1;
                    break;
                }
            }
        }        
        return steps[A.length - 1];
    }
}
======================================
贪心


public class Solution {
    public int jump(int[] A) {
        if (A.length == 0) {
            return 0;
        }
        int step = 0;
        int reach = 0;
        int cur = 0;
        while (cur < A.length) {
            if (reach >= A.length - 1) {
                break;
            }
            int temp = reach;
            while (cur <= temp) {
                if (A[cur] + cur > reach) {
                    reach = A[cur] + cur;
                }
                cur++;
            }
            step++;
        }
        return step;
    }
}