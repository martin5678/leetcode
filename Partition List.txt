Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.


-------------------------

public class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode smalldummy = new ListNode(0);
        ListNode bigdummy = new ListNode(0);
        ListNode cursmall = smalldummy;
        ListNode curbig = bigdummy;
        while (head != null) {
            ListNode temp = head.next;
            if (head.val < x) {
                cursmall.next = head;
                head.next = null;
                head = temp;
                cursmall = cursmall.next;
            } else {
                curbig.next = head;
                head.next = null;
                head = temp;
                curbig = curbig.next;
            }
        }
        cursmall.next = bigdummy.next;
        return smalldummy.next;
    }
}