You are given a string, S, and a list of words, L, that are all of the same length. Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.

For example, given:
S: "barfoothefoobarman"
L: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).

----------------------------

public class Solution {
    public List<Integer> findSubstring(String S, String[] L) {
        List<Integer> rs = new ArrayList<Integer>();
        HashMap<String, Integer> dict = new HashMap<String, Integer>();
        HashMap<String, Integer> find = new HashMap<String, Integer>();
        int snum = L.length; 
        int slen = L[0].length();
        for (String i : L) {
            if (!dict.containsKey(i)) {
                dict.put(i, 1);            
            } else {
                dict.put(i, dict.get(i) + 1);
            }
        }
        for (int i = 0; i <= S.length() - snum * slen; i++) {
            find.clear();
            int j;
            for (j = 0; j < snum; j++) {
                int k = i + j * slen;
                String sub = S.substring(k, k + slen);
                if (!dict.containsKey(sub)) {
                    break;
                }
                if (find.containsKey(sub)) {
                    find.put(sub, find.get(sub) + 1);
                } else {
                    find.put(sub, 1);
                }
                if (find.get(sub) > dict.get(sub)) {
                    break;
                }
            }
            if (j == snum) {
                rs.add(i);
            }
        }
        return rs;
    }
}