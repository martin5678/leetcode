Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.


-------------------------------------

My solution: 


public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length - 1;
        int n = matrix[0].length - 1;
        int start = 0;
        int end = m;
        int mid = 0;
        int mm = n / 2;
        while (start <=  end) {
            mid = (start + end) / 2;
            if (target == matrix[mid][mm]) {
                return true;
            } else if (target > matrix[mid][mm]) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        int index;
        if (target < matrix[mid][0]) {
            index = mid == 0 ? mid : mid - 1;
        } else if (target > matrix[mid][n]) {
            index = mid == m ? mid : mid + 1;
        } else {
            index = mid;
        }
        start = 0;
        end = n;
        while (start <= end) {
            mid = (start + end) / 2;
            if (target == matrix[index][mid]) {
                return true;
            } else if (target > matrix[index][mid]) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return false;
    }
}





A better solution: 




public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int start = 0;
        int end = rows * cols - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            // Tricks to treat it as a 1-D array
            int digit = matrix[mid / cols][mid % cols];
            if (target == digit) {
                return true;
            } else if (target > digit) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return false;
    }
}