Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

---------------------------------


solution:

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        else return judge(root.left,root.right);
    }
    
    public boolean judge(TreeNode p1, TreeNode p2){
        if(p1 == null || p2 == null) return ((p1 == null) && (p2 == null));
        else if(p1.val == p2.val) return judge(p1.left, p2.right) && judge(p1.right, p2.left);
        else return false;
    } 
}