Given an absolute path for a file (Unix-style), simplify it.

For example,
path = "/home/", => "/home"
path = "/a/./b/../../c/", => "/c"
click to show corner cases.

Corner Cases:
Did you consider the case where path = "/../"?
In this case, you should return "/".
Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
In this case, you should ignore redundant slashes and return "/home/foo".

------------------

Notice : substring
public String substring(int beginIndex,
                        int endIndex)返回一个新字符串，它是此字符串的一个子字符串。该子字符串从指定的 beginIndex 处开始，直到索引 endIndex - 1 处的字符。因此，该子字符串的长度为 endIndex-beginIndex。 

所以最后用的是 result.length() - 1.

public class Solution {
    public String simplifyPath(String path) {
        String[] temp = path.split("/");
        ArrayList<String> rs = new ArrayList<String>();
        for (String i : temp) {
            if (i.equals("..")) {
                if (rs.size() > 0) {
                    rs.remove(rs.size() - 1);
                }    
            } else if (!i.equals(".") && !i.equals("")) {
                rs.add(i);
            }
        }
        StringBuilder sb = new StringBuilder();
        sb.append("/");
        for (String i : rs) {
            sb.append(i);
            sb.append("/");
        }
        String result = sb.toString();
        if (result.length() > 1) {
            result = result.substring(0, result.length() - 1);
        }
        return result;
    }
}