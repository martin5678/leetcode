Given an absolute path for a file (Unix-style), simplify it.

For example,
path = "/home/", => "/home"
path = "/a/./b/../../c/", => "/c"
click to show corner cases.

Corner Cases:
Did you consider the case where path = "/../"?
In this case, you should return "/".
Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
In this case, you should ignore redundant slashes and return "/home/foo".

------------------

Notice : substring
public String substring(int beginIndex,
                        int endIndex)返回一个新字符串，它是此字符串的一个子字符串。该子字符串从指定的 beginIndex 处开始，直到索引 endIndex - 1 处的字符。因此，该子字符串的长度为 endIndex-beginIndex。 

所以最后用的是 result.length() - 1.

public class Solution {
    public String simplifyPath(String path) {
        String[] temp = path.split("/");
        ArrayList<String> rs = new ArrayList<String>();
        for (String i : temp) {
            if (i.equals("..")) {
                if (rs.size() > 0) {
                    rs.remove(rs.size() - 1);
                }    
            } else if (!i.equals(".") && !i.equals("")) {
                rs.add(i);
            }
        }
        StringBuilder sb = new StringBuilder();
        sb.append("/");
        for (String i : rs) {
            sb.append(i);
            sb.append("/");
        }
        String result = sb.toString();
        if (result.length() > 1) {
            result = result.substring(0, result.length() - 1);
        }
        return result;
    }
}



如果不用split方法



public class Solution {
    public String simplifyPath(String path) {
        Stack<String> strs = new Stack<String>();
        int index1 = 0;
        int index2 = 1;
        while (index2 < path.length()) {
            while (index2 < path.length() && 
                path.charAt(index2) != '/') {
                index2++;
            }
            if (index2 - index1 > 1) {
                String temp = path.substring(index1 + 1, index2);
                if (temp.equals("..")) {
                    if (strs.size() > 0) {
                        strs.pop();
                    }
                }
                if (!temp.equals("..") && !temp.equals(".")) {
                    strs.push(temp);
                }
            }
            index1 = index2;
            index2++;
        }
        if (strs.size() == 0) {
            return "/";
        }
        StringBuilder sb = new StringBuilder();
        while (strs.size() > 0) {
            String t = strs.pop();
            sb.insert(0, t);
            sb.insert(0,"/");
        }
        return sb.toString();
    }
}


=============================================


public class Solution {
    public String simplifyPath(String path) {
        Stack<String> st = new Stack<String>();
        int index = 0;
        while (index < path.length()) {
            if (path.charAt(index) == '/') {
                index++;
                continue;
            }
            int left = index;
            while (index < path.length() && path.charAt(index) != '/') {
                index++;
            }
            String sub = path.substring(left, index);
            if (sub.equals(".")) {
                continue;
            } else if (sub.equals("..")) {
                if (!st.isEmpty()) {
                    st.pop();
                }
            } else {
                st.push(sub);
            }
        }
        if (st.size() == 0) {
            return "/";
        }
        StringBuilder sb = new StringBuilder();
        while (st.size() > 0) {
            sb.insert(0, st.pop());
            sb.insert(0, '/');
        }
        return sb.toString();
    }
}
