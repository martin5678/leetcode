There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Follow up:
Could you solve it in O(nk) runtime?

================================

记录上一次循环的最小和第二小的值，因为最小的cost只能从这两个值而来

public class Solution {
    public int minCostII(int[][] costs) {
        int n = costs.length;
        if (n == 0) {
            return 0;
        }
        int k = costs[0].length;
        int preMin = 0;
        int preIndexMin = -1;
        int preSecMin = 0;
        for (int i = 0; i < n; i++) {
            int min = Integer.MAX_VALUE;
            int indexMin = -1;
            int secMin = Integer.MAX_VALUE;
            for (int j = 0; j < k; j++) {
                int cost = costs[i][j] + (j == preIndexMin ? preSecMin : preMin);
                if (indexMin == -1) {
                    min = cost;
                    indexMin = j;
                } else if (cost < min) {
                    secMin = min;
                    min = cost;
                    indexMin = j;
                } else if (cost < secMin) {
                    secMin = cost;
                }
            }
            preMin = min;
            preIndexMin = indexMin;
            preSecMin = secMin;
        }
        return preMin;
    }
}
