Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

------------------------------------------

Note: a lot of methods can solve this problem.

solution1:

public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        boolean[] isUsed = new boolean[num.length];
        doPerm(num, rs, temp, isUsed);
        return rs;
    }
    
    public void doPerm(int[] num, List<List<Integer>> rs, ArrayList<Integer> temp, boolean[] isUsed) {
        if(temp.size() == num.length) {
            rs.add(new ArrayList<Integer>(temp));
        }
        for (int i = 0; i < num.length; i++) {
            if (!isUsed[i]) {
                isUsed[i] = true;
                temp.add(num[i]);
                doPerm(num, rs, temp, isUsed);
                temp.remove(temp.size() - 1);
                isUsed[i] = false;
            }
        }
    }
}


Solution 2:

static ArrayList<int[]> ret = new ArrayList<int[]>();  
      public void perm(int[] num, int i){  
	        if( i == num.length){  
	        	int[] a1 = num.clone();
	            ret.add(a1);  
	        }  
	          
	        for(int j = i; j < num.length; j++){  
	            swap(num ,i, j);  
	            perm(num, i + 1);  
	            swap(num, j, i);  
	        }  
	    }  
	  
	    public void swap(int a[], int i, int j) {
	    	int temp = 0;
	    	temp = a[i];
	    	a[i] = a[j];
	    	a[j] = temp;
	    }
	    public ArrayList<int[]> permute(int[] num) {  
	        perm(num, 0);  	          
	        return ret;      
	    } 