
Compare two version numbers version1 and version1.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37




----------------------------------------------



public class Solution {
    public int compareVersion(String version1, String version2) {
        ArrayList<Integer> buff1 = new ArrayList<>();
        ArrayList<Integer> buff2 = new ArrayList<>();
        fill(buff1, version1);
        fill(buff2, version2);
        int index1 = 0;
        int index2 = 0;
        // remove trailing 0
        while (buff1.size() > 0 && buff1.get(buff1.size() - 1) == 0) {
            buff1.remove(buff1.size() - 1);
        }
        while (buff2.size() > 0 && buff2.get(buff2.size() - 1) == 0) {
            buff2.remove(buff2.size() - 1);
        }
        while (index1 < buff1.size() && index2 < buff2.size()) {
            if (buff1.get(index1) > buff2.get(index2)) {
                return 1;
            } else if (buff1.get(index1) < buff2.get(index2)) {
                return -1;
            }
            index1++;
            index2++;
        }
        int diff = (buff1.size() - index1) - (buff2.size() - index2);
        if (diff > 0) {
            return 1;
        } else if (diff < 0) {
            return -1;
        } else {
            return 0;
        }
    }
    
    public void fill(ArrayList<Integer> buff, String s) {
        int left = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '.' ) {
                String sub = s.substring(left, i);
                buff.add(Integer.parseInt(sub));
                left = i + 1;
            }
            if (i == s.length() - 1) {
                String sub = s.substring(left, i + 1);
                buff.add(Integer.parseInt(sub));
            }
        }
    }
}