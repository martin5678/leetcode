Given an array and a value, remove all instances of that value in place and return the new length.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.


-----------------------------------------------
1,my solution.(bull shit two months ago)

move the element to the tail of the array and swap the element in the tail to the current location.

public class Solution {
    public int removeElement(int[] A, int elem) {
        int tail = A.length - 1;
        int head = 0;
        int len = A.length;
        if(len == 0) return 0;
        int min = Integer.MIN_VALUE;
        for(; head <= tail; head++){
            if(A[head] == elem){
                if(A[tail] != elem){
                    A[head] = A[tail];
                    A[tail--] = min;
                }
                else{
                    A[tail--] = min;
                    head--;
                }
                len--;
            }
        }
        return len;
        
    }
}




2, A simpler method.


public class Solution {
    public int removeElement(int[] A, int elem) {
        int current = 0;
        for (int index = 0; index < A.length; index++) {
            if (A[index] != elem) {
                A[current++] = A[index];
            }
        }
        return current;
    }
}


3 把这个元素全部移到末尾

public class Solution {
    public int removeElement(int[] A, int elem) {
        int cur = A.length - 1;
        for (int i = 0; i < A.length; i++) {
            while (cur >= 0 && A[cur] == elem) {
                cur--;
            }
            if (i >= cur) {
                break;
            }
            if (A[i] == elem) {
                int temp = A[cur];
                A[cur] = A[i];
                A[i] = temp;
                cur--;
            }
        }
        return cur + 1;
    }
}
