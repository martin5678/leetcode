Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, ¡­ , ak) must be in non-descending order. (ie, a1 ¡Ü a2 ¡Ü ¡­ ¡Ü ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 

---------------------------------------
Note: Change a little from combination sum, and similar to subsets II.

public class Solution {
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        if (num == null) {
            return rs;
        }
        Arrays.sort(num);
        helper(rs, temp, num, target, 0);
        return rs;
    }
    
    public void helper(List<List<Integer>> rs, ArrayList<Integer> temp,
        int[] num, int target, int pos) {
        if (target == 0) {
            rs.add(new ArrayList<Integer>(temp));
            return;
        }   
        for(int i = pos; i < num.length; i++) {
            if (i != pos && num[i] == num[i - 1]) {
                continue;
            }   
            if(num[i] > target) {
                break;
            }
            temp.add(num[i]);
            helper(rs, temp, num, target-num[i], i + 1);
            temp.remove(temp.size() - 1);
        }
    }
}