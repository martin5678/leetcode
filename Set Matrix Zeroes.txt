Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.

click to show follow up.

Follow up:
Did you use extra space?
A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

------------------------------------

The basic idea is to use the first row and column to store the information. Then we need to know whether or not to set the first row and column to zeroes. So, we use two boolean to store that information.


public class Solution {
    public void setZeroes(int[][] matrix) {
        if (matrix.length == 0) {
            return;
        }
        int col = matrix[0].length;
        int row = matrix.length;
        boolean firstrow = false;
        boolean firstcol = false;
        for (int i = 0; i < row; i++) {
            if (matrix[i][0] == 0) {
                firstcol = true;
                break;
            }
        }
        for (int i = 0; i < col; i++) {
            if (matrix[0][i] == 0) {
                firstrow = true;
                break;
            }
        }
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                if (matrix[i][j] == 0) {
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < col; j++) {
                if (matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }
        if (firstcol) {
            for (int i = 0; i < row; i++) {
                matrix[i][0] = 0;
            }
        }
        if (firstrow) {
            for (int i = 0; i < col; i++) {
                matrix[0][i] = 0;
            }
        }        
    }
}