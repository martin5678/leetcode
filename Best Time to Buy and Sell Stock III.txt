Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).


------------------------------------------------------------
solution1: 

same idea as version 1 with modification. It works but exceed the time limit. Time complexity O(n2).

public class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n == 0 || n == 1) return 0;
        else if(n == 2) return prices[1] > prices[0] ? prices[1] - prices[0] : 0;
        int result = 0;
        for(int i = n -3; i >= 0; i--){
            int maxj = prices[n - 1];
            int maxi = prices[n - 2];
            int tempi = 0;
            int tempj = 0;
            for(int j = n - 2; j > i; j--){
                maxj = max(maxj, prices[j]);
                maxi = max(maxi, prices[j]);
                tempi = max(tempi, maxi - prices[i]);
                tempj = max(tempj, maxj - prices[j]);
                result = max(tempi + tempj, result);
            }
        }
        return result;
    }
    
    public int max(int a, int b){
        return a > b ? a : b;
    }
}



solution 2:

same idea as version 2. just split in day i. caculate the max profit in subarray [0...i][i...n-1]

O(n) time  O(n) space.

first i stand for sell at day i   second i stand for buy at day i.

DP can have two ways to handle the version 1 problem, sell at day i and buy at day i 

public class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) {
            return 0;
        }
        int len = prices.length;
        // max value sell stock at day i
        int[] sell = new int[len];
        sell[0] = 0;
        // max value buy stock at day i
        int[] buy = new int[len];
        buy[len - 1] = 0;
        int max = prices[len - 1];
        int min = prices[0];
        for (int i = 1; i < len; i++) {
            min = Math.min(min, prices[i]);
            sell[i] = Math.max(sell[i - 1], prices[i] - min);
        }
        int result = 0;
        for (int i = len - 2; i >= 0; i--) {
            max = Math.max(max, prices[i]);
            buy[i] = Math.max(buy[i + 1], max - prices[i]);
            result = Math.max(result, buy[i] + sell[i]);
        }
        return result;
    }
}