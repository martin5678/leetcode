Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]



-----------------------------------

Notice : in if (temp.size() == k) {
            rs.add(new ArrayList<Integer>(temp));
            return;
        }
without return the algorithm still works but it will go to more recursions. So the reuturn is still important.


public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        if (k == 0) {
            return rs;
        }
        helper(n, k, rs, temp, 1);
        return rs;
    }
    
    public void helper(int n, int k, List<List<Integer>> rs,
        ArrayList<Integer> temp, int start) {
        if (temp.size() == k) {
            rs.add(new ArrayList<Integer>(temp));
            return;
        }
        for (int i = start; i <= n; i++) {
                temp.add(i);
                helper(n, k, rs, temp, i + 1);
                temp.remove(temp.size() - 1);
        }
    }
}