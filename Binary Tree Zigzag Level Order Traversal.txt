Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

-------------------------------------

public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> rs = new ArrayList<List<Integer>>();
        if (root == null) {
            return rs;
        }
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        while (!q.isEmpty()) {
            ArrayList<Integer> temp = new ArrayList<Integer>();
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode head = q.poll();
                temp.add(head.val);
                if (head.left != null) {
                    q.offer(head.left);
                }
                if (head.right != null) {
                    q.offer(head.right);
                }
            }
            rs.add(temp);
        }
        zig(rs);
        return rs;
    }
    
    private void zig(List<List<Integer>> rs) {
        for (int i = 0; i < rs.size(); i++) {
            if (i % 2 == 1) {
                reverse(rs.get(i));
            }
        }
    }
    
    private void reverse(List<Integer> temp) {
        int n = temp.size();
        for (int i = 0; i < n / 2; i++) {
            int t = temp.get(i);
            temp.set(i, temp.get(n - 1 - i));
            temp.set(n - 1 - i, t);
        }
    }
}