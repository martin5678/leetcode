Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ¡Ü m ¡Ü n ¡Ü length of list.

----------------------------------------

public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if (head == null || head.next == null || m == n) {
            return head;
        }
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy;
        for (int i = 1; i < m; i++) {
            pre = head;
            head = head.next;
        }
        ListNode newTail = head;
        ListNode newHead = null;
        ListNode afterTail = null;
        for (int i = 0; i < n - m + 1; i++) {
            if (i == n - m) {
                afterTail = head.next;
            }
            ListNode temp = head.next;
            head.next = newHead;
            newHead = head;
            head = temp;
        }
        newTail.next = afterTail;
        pre.next = newHead;
        return dummy.next;
    }
}