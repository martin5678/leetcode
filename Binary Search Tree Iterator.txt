Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.




-------------------------------------------------



public class BSTIterator {
    Stack<TreeNode> st = new Stack<TreeNode>();
    
    private void update(TreeNode node) {
        while (node != null) {
            st.push(node);
            node = node.left;
        }
    }
    
    public BSTIterator(TreeNode root) {
        update(root);    
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !st.isEmpty();
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode temp = st.pop();
        if (temp != null) {
            update(temp.right);
            return temp.val;
        }
        return -1;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */